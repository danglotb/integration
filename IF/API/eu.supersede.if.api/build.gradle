/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'yosu' at '2/12/16 1:34 PM' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
	maven {
            url 'http://localhost:10080/artifactory/plugins-snapshot'
            name = 'maven-supersede'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.7.RELEASE")
	//Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

// Plugins
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
//apply plugin: 'maven'
apply plugin: 'maven-publish'
//apply plugin: 'artifactory-publish'

allprojects {
    apply plugin: "com.jfrog.artifactory"
}

group = 'eu.supersede.if'
version = '1.0.0-SNAPSHOT'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    // jcenter()
    mavenCentral()
    add buildscript.repositories.getByName ("maven-supersede")
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    compile 'org.apache.axis2:axis2:1.6.1'
    compile 'org.apache.axis2:axis2-transport-http:1.6.1'
    compile 'org.apache.axis2:axis2-transport-local:1.6.1'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile('com.jayway.jsonpath:json-path')
    compile 'ca.juliusdavies:not-yet-commons-ssl:0.3.9' //Required for EasySSLProtocolSocketFactory class
    compile files('lib/org.wso2.carbon.um.ws.api.stub_4.2.2.jar')
    compile files('lib/org.wso2.carbon.tenant.mgt.stub_4.2.0.jar')
    compile files('lib/org.wso2.carbon.um.ws.api_4.2.2.jar')
    compile files('lib/org.wso2.carbon.user.api_4.2.0.jar')
    compile files('lib/org.wso2.carbon.user.core_4.2.0.jar')
    compile files('lib/org.wso2.carbon.utils_4.2.0.jar')
    compile files('lib/opensaml2_2.4.1-wso2v1.jar')
    compile files ('../../../../dm_game/applications/game-requirements/build/libs/game-requirements-0.0.1-SNAPSHOT.jar')
    
    
//    compile group: 'xalan', name: 'xalan', version: '2.7.1'
//    compile group: 'org.apache.rampart', name: 'rampart', version: '1.6.2'
//    compile group: 'org.apache.rampart', name: 'rahas', version: '1.6.2'
    
//    testCompile 'org.apache.rampart:rahas:1.6.2'
//    testCompile 'org.apache.rampart:rampart-core:1.6.2'
    
    
    
    compile 'org.springframework:spring-core'
    
//    testCompile 'org.opensaml:opensaml'
//    testCompile 'org.opensaml:xmltooling'
//    testCompile 'org.opensaml:core'

    compile("org.springframework.boot:spring-boot-starter-web")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}

// Test execution JVM properties
tasks.withType(Test){
	systemProperty 'is.admin.user', System.getProperty ('is.admin.user', 'admin@atos.supersede.eu')
	systemProperty 'is.admin.passwd', System.getProperty ('is.admin.passwd', 'rtgWCyrc')
	systemProperty 'supersede.if.properties', System.getProperty ('supersede.if.properties', 'if.properties')
}

// Test execution filter
test {
	filter {
		includeTestsMatching "*MailProxyTest"
		includeTestsMatching "*FEDataStoreProxyTest"
//		includeTestsMatching "*IFTenantsManagerTest"
		includeTestsMatching "*IFAuthenticationManagerTest"
		includeTestsMatching "*DecisionMakingSystemProxyTest"
	}
}


artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'libs-snapshot-local'
            maven = true
            
        }
	defaults {
   	    publications ('mavenJava')
	}
    }
    resolve {
        repository {
            repoKey = 'libs-snapshot'
            maven = true
            
        }
    }
}

artifactoryPublish {
  dependsOn jar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

