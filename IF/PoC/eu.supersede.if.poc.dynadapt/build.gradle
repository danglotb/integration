/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'yosu' at '11/5/15 10:42 AM' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */
  
 buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://supersede.es.atos.net:10080/artifactory/libs-snapshot'
            name = 'maven-supersede-snapshot'
	    credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
	    }
        }
	maven {
            url 'http://supersede.es.atos.net:10080/artifactory/libs-release'
            name = 'maven-supersede-release'
	    credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
	    }
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.7.RELEASE")
	//Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
//apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'

jar{
	baseName = 'eu.supersede.if.poc.dynadapt'
	version = '0.1.0'
}

war{
	baseName = 'eu.supersede.if.poc.dynadapt'
	version = '0.1.0'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    mavenCentral()
    add buildscript.repositories.getByName ("maven-supersede-snapshot")
    add buildscript.repositories.getByName ("maven-supersede-release")
}

configurations {
    providedRuntime
}

// In this section you declare the dependencies for your production and test code
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile('com.jayway.jsonpath:json-path')
    
    compile("org.springframework.boot:spring-boot-starter-web")
    compile project(':eu.supersede.if.api')
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}
